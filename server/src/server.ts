/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
import {
	createConnection,
	TextDocuments,
	Diagnostic,
	DiagnosticSeverity,
	ProposedFeatures,
	InitializeParams,
	DidChangeConfigurationNotification,
	CompletionItem,
	CompletionItemKind,
	TextDocumentPositionParams,
	TextDocumentSyncKind,
	InitializeResult,
	WorkspaceChange,
	Range
} from 'vscode-languageserver/node';

import {
	TextDocument
} from 'vscode-languageserver-textdocument';

const unicode_dict: { [key: string]: string } = {'R': '‚Ñù', 'Z': '‚Ñ§', 'x': '√ó', 'times': '√ó', 'inf': '‚àû', 'in': '‚àà', 'sum': '‚àë',
                             'had': '‚àò', 'kro': '‚äó', 'dot': '‚ãÖ', 'T': '·µÄ', '^T': '·µÄ', 'par': '‚àÇ', 'emp': '‚àÖ',
                             'arr': '‚Üí', 'int': '‚à´', 'dbl': '‚Äñ', 'pi': 'œÄ', 'sig': 'œÉ', 'rho': 'œÅ',
                             'phi': 'œï', 'theta': 'Œ∏', 'alpha': 'Œ±', 'beta': 'Œ≤', 'gamma': 'Œ≥', 'delta':'Œ¥', 'epsilon': 'Œµ',
                             'zeta':'Œ∂', 'eta':'Œ∑', 'iota':'Œπ', 'kappa':'Œ∫', 'lambda':'Œª', 'mu':'Œº', 'nu':'ŒΩ', 'xi':'Œæ', 'omicron':'Œø',
                             'sigma':'œÉ', 'tau':'œÑ', 'upsilon':'œÖ', 'chi':'œá', 'psi':'œà', 'omega':'œâ',
                             'u0': '‚ÇÄ', 'u1': '‚ÇÅ', 'u2': '‚ÇÇ', 'u3': '‚ÇÉ', 'u4': '‚ÇÑ', 'u5': '‚ÇÖ', 'u6': '‚ÇÜ', 'u7': '‚Çá', 'u8': '‚Çà', 'u9': '‚Çâ',
                             '_0': '‚ÇÄ', '_1': '‚ÇÅ', '_2': '‚ÇÇ', '_3': '‚ÇÉ', '_4': '‚ÇÑ', '_5': '‚ÇÖ', '_6': '‚ÇÜ', '_7': '‚Çá', '_8': '‚Çà', '_9': '‚Çâ',
                             's0': '‚Å∞', 's1': '¬π', 's2': '¬≤', 's3': '¬≥', 's4': '‚Å¥', 's5': '‚Åµ', 's6': '‚Å∂', 's7': '‚Å∑', 's8': '‚Å∏', 's9': '‚Åπ', 's-1': '‚Åª¬π', '^-1': '‚Åª¬π',
                             '^0': '‚Å∞', '^1': '¬π', '^2': '¬≤', '^3': '¬≥', '^4': '‚Å¥', '^5': '‚Åµ', '^6': '‚Å∂', '^7': '‚Å∑', '^8': '‚Å∏', '^9': '‚Åπ',
                             '_a': '‚Çê', '_e': '‚Çë', '_h': '‚Çï', '_i': '·µ¢', '_j': '‚±º', '_k': '‚Çñ',
                             '_l': '‚Çó', '_m': '‚Çò', '_n': '‚Çô', '_o': '‚Çí', '_p': '‚Çö', '_s': '‚Çõ', '_t': '‚Çú', '_u': '·µ§',
                             '_v': '·µ•', '_x': '‚Çì', '1': 'ùüô', 'cdot': '‚ãÖ', 'nabla': '‚àá',
                             'sqrt': '‚àö', '+-': '¬±', '<=': '‚â§', '<=>': '‚áî', '>=': '‚â•', '1/2': '¬Ω',
                             '1/3': '‚Öì', '1/4': '¬º', '1/5': '‚Öï', '1/6': '‚Öô', '1/7': '‚Öê', '1/8': '‚Öõ', '1/9': '‚Öë', '1/10': '‚Öí',
                             '2/3': '‚Öî', '2/5': '‚Öñ', '3/4': '¬æ', '3/5': '‚Öó', '3/8': '‚Öú', '4/5': '‚Öò', '5/6': '‚Öö', '5/8': '‚Öù', '7/8': '‚Öû',
                             'heart': '‚ù§Ô∏è', 'iheartla': 'I‚ù§Ô∏èLA', 'ihla': 'I‚ù§Ô∏èLA',
                             'le':'‚â§', 'ge':'‚â•', 'ne': '‚â†', 'notin':'‚àâ', 'div':'√∑', 'nplus': '¬±',
                             'linner': '‚ü®', 'rinner':'‚ü©', 'num1': 'ùüô',
                             'hat': '\u0302', 'bar': '\u0304'
                             };
// Create a connection for the server, using Node's IPC as a transport.
// Also include all preview / proposed LSP features.
const connection = createConnection(ProposedFeatures.all);

// Create a simple text document manager.
const documents: TextDocuments<TextDocument> = new TextDocuments(TextDocument);

let hasConfigurationCapability = false;
let hasWorkspaceFolderCapability = false;
let hasDiagnosticRelatedInformationCapability = false;

connection.onInitialize((params: InitializeParams) => {
	const capabilities = params.capabilities;

	// Does the client support the `workspace/configuration` request?
	// If not, we fall back using global settings.
	hasConfigurationCapability = !!(
		capabilities.workspace && !!capabilities.workspace.configuration
	);
	hasWorkspaceFolderCapability = !!(
		capabilities.workspace && !!capabilities.workspace.workspaceFolders
	);
	hasDiagnosticRelatedInformationCapability = !!(
		capabilities.textDocument &&
		capabilities.textDocument.publishDiagnostics &&
		capabilities.textDocument.publishDiagnostics.relatedInformation
	);

	const result: InitializeResult = {
		capabilities: {
			textDocumentSync: TextDocumentSyncKind.Incremental,
			// Tell the client that this server supports code completion.
			completionProvider: {
				resolveProvider: true
			}
		}
	};
	if (hasWorkspaceFolderCapability) {
		result.capabilities.workspace = {
			workspaceFolders: {
				supported: true
			}
		};
	}
	return result;
});

connection.onInitialized(() => {
	if (hasConfigurationCapability) {
		// Register for all configuration changes.
		connection.client.register(DidChangeConfigurationNotification.type, undefined);
	}
	if (hasWorkspaceFolderCapability) {
		connection.workspace.onDidChangeWorkspaceFolders(_event => {
			connection.console.log('Workspace folder change event received.');
		});
	}
});

// The example settings
interface ExampleSettings {
	maxNumberOfProblems: number;
}

// The global settings, used when the `workspace/configuration` request is not supported by the client.
// Please note that this is not the case when using this server with the client provided in this example
// but could happen with other clients.
const defaultSettings: ExampleSettings = { maxNumberOfProblems: 1000 };
let globalSettings: ExampleSettings = defaultSettings;

// Cache the settings of all open documents
const documentSettings: Map<string, Thenable<ExampleSettings>> = new Map();

connection.onDidChangeConfiguration(change => {
	if (hasConfigurationCapability) {
		// Reset all cached document settings
		documentSettings.clear();
	} else {
		globalSettings = <ExampleSettings>(
			(change.settings.languageServerExample || defaultSettings)
		);
	}

	// Revalidate all open text documents
	documents.all().forEach(validateTextDocument);
});

function getDocumentSettings(resource: string): Thenable<ExampleSettings> {
	if (!hasConfigurationCapability) {
		return Promise.resolve(globalSettings);
	}
	let result = documentSettings.get(resource);
	if (!result) {
		result = connection.workspace.getConfiguration({
			scopeUri: resource,
			section: 'languageServerExample'
		});
		documentSettings.set(resource, result);
	}
	return result;
}

// Only keep settings for open documents
documents.onDidClose(e => {
	documentSettings.delete(e.document.uri);
});

// The content of a text document has changed. This event is emitted
// when the text document first opened or when its content has changed.
documents.onDidChangeContent(change => {
	convertTextDocument(change.document);
	validateTextDocument(change.document);
});

async function convertTextDocument(textDocument: TextDocument): Promise<void> { 
	const settings = await getDocumentSettings(textDocument.uri);
	const text = textDocument.getText();
    for (const key in unicode_dict) {
        const old_str = '\\' + key + ' ';
		const index = text.indexOf(old_str); 
        if (index != -1){
            const workspaceChange = new WorkspaceChange();
			const textChange = workspaceChange.getTextEditChange(textDocument.uri);
			const start = textDocument.positionAt(index);
			const end = textDocument.positionAt(index+old_str.length);
			// const range = new Range;
			const value:string = unicode_dict[key];
			textChange.replace({start, end}, value); 
			const reply = connection.workspace.applyEdit(workspaceChange.edit);
			console.log (reply);
			break;
        }
    }
}

async function validateTextDocument(textDocument: TextDocument): Promise<void> {
	// In this simple example we get the settings for every validate run.
	const settings = await getDocumentSettings(textDocument.uri);

	// The validator creates diagnostics for all uppercase words length 2 and more
	const text = textDocument.getText();
	const pattern = /\b[A-Z]{2,}\b/g;
	let m: RegExpExecArray | null;

	let problems = 0;
	const diagnostics: Diagnostic[] = [];
	while ((m = pattern.exec(text)) && problems < settings.maxNumberOfProblems) {
		problems++;
		const diagnostic: Diagnostic = {
			severity: DiagnosticSeverity.Warning,
			range: {
				start: textDocument.positionAt(m.index),
				end: textDocument.positionAt(m.index + m[0].length)
			},
			message: `${m[0]} is all uppercase.`,
			source: 'ex'
		};
		if (hasDiagnosticRelatedInformationCapability) {
			diagnostic.relatedInformation = [
				{
					location: {
						uri: textDocument.uri,
						range: Object.assign({}, diagnostic.range)
					},
					message: 'Spelling matters'
				},
				{
					location: {
						uri: textDocument.uri,
						range: Object.assign({}, diagnostic.range)
					},
					message: 'Particularly for names'
				}
			];
		}
		diagnostics.push(diagnostic);
	}

	// Send the computed diagnostics to VSCode.
	connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
}

connection.onDidChangeWatchedFiles(_change => {
	// Monitored files have change in VSCode
	connection.console.log('We received an file change event');
});

// This handler provides the initial list of the completion items.
connection.onCompletion(
	(_textDocumentPosition: TextDocumentPositionParams): CompletionItem[] => {
		// The pass parameter contains the position of the text document in
		// which code complete got requested. For the example we ignore this
		// info and always provide the same completion items.
		return [
			{
				label: 'where',
				kind: CompletionItemKind.Text,
				data: 1
			},
			{
				label: 'given',
				kind: CompletionItemKind.Text,
				data: 2
			}
		];
	}
);

// This handler resolves additional information for the item selected in
// the completion list.
connection.onCompletionResolve(
	(item: CompletionItem): CompletionItem => {
		if (item.data === 1) {
			item.detail = 'TypeScript details';
			item.documentation = 'TypeScript documentation';
		} else if (item.data === 2) {
			item.detail = 'JavaScript details';
			item.documentation = 'JavaScript documentation';
		}
		return item;
	}
);

// Make the text document manager listen on the connection
// for open, change and close text document events
documents.listen(connection);

// Listen on the connection
connection.listen();
